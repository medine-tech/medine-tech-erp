/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as FirstCompanyImport } from './routes/first-company'
import { Route as R404Import } from './routes/$404'
import { Route as CompanyIdRouteImport } from './routes/$companyId/route'
import { Route as IndexImport } from './routes/index'
import { Route as CompanyIdDashboardImport } from './routes/$companyId/dashboard'
import { Route as CompanyIdCompaniesRouteImport } from './routes/$companyId/companies/route'
import { Route as CompanyIdCompaniesListImport } from './routes/$companyId/companies/list'
import { Route as CompanyIdCompaniesCreateImport } from './routes/$companyId/companies/create'
import { Route as CompanyIdCompaniesEditIdImport } from './routes/$companyId/companies/edit/$id'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const FirstCompanyRoute = FirstCompanyImport.update({
  id: '/first-company',
  path: '/first-company',
  getParentRoute: () => rootRoute,
} as any)

const R404Route = R404Import.update({
  id: '/$404',
  path: '/$404',
  getParentRoute: () => rootRoute,
} as any)

const CompanyIdRouteRoute = CompanyIdRouteImport.update({
  id: '/$companyId',
  path: '/$companyId',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CompanyIdDashboardRoute = CompanyIdDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => CompanyIdRouteRoute,
} as any)

const CompanyIdCompaniesRouteRoute = CompanyIdCompaniesRouteImport.update({
  id: '/companies',
  path: '/companies',
  getParentRoute: () => CompanyIdRouteRoute,
} as any)

const CompanyIdCompaniesListRoute = CompanyIdCompaniesListImport.update({
  id: '/list',
  path: '/list',
  getParentRoute: () => CompanyIdCompaniesRouteRoute,
} as any)

const CompanyIdCompaniesCreateRoute = CompanyIdCompaniesCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => CompanyIdCompaniesRouteRoute,
} as any)

const CompanyIdCompaniesEditIdRoute = CompanyIdCompaniesEditIdImport.update({
  id: '/edit/$id',
  path: '/edit/$id',
  getParentRoute: () => CompanyIdCompaniesRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$companyId': {
      id: '/$companyId'
      path: '/$companyId'
      fullPath: '/$companyId'
      preLoaderRoute: typeof CompanyIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/$404': {
      id: '/$404'
      path: '/$404'
      fullPath: '/$404'
      preLoaderRoute: typeof R404Import
      parentRoute: typeof rootRoute
    }
    '/first-company': {
      id: '/first-company'
      path: '/first-company'
      fullPath: '/first-company'
      preLoaderRoute: typeof FirstCompanyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/$companyId/companies': {
      id: '/$companyId/companies'
      path: '/companies'
      fullPath: '/$companyId/companies'
      preLoaderRoute: typeof CompanyIdCompaniesRouteImport
      parentRoute: typeof CompanyIdRouteImport
    }
    '/$companyId/dashboard': {
      id: '/$companyId/dashboard'
      path: '/dashboard'
      fullPath: '/$companyId/dashboard'
      preLoaderRoute: typeof CompanyIdDashboardImport
      parentRoute: typeof CompanyIdRouteImport
    }
    '/$companyId/companies/create': {
      id: '/$companyId/companies/create'
      path: '/create'
      fullPath: '/$companyId/companies/create'
      preLoaderRoute: typeof CompanyIdCompaniesCreateImport
      parentRoute: typeof CompanyIdCompaniesRouteImport
    }
    '/$companyId/companies/list': {
      id: '/$companyId/companies/list'
      path: '/list'
      fullPath: '/$companyId/companies/list'
      preLoaderRoute: typeof CompanyIdCompaniesListImport
      parentRoute: typeof CompanyIdCompaniesRouteImport
    }
    '/$companyId/companies/edit/$id': {
      id: '/$companyId/companies/edit/$id'
      path: '/edit/$id'
      fullPath: '/$companyId/companies/edit/$id'
      preLoaderRoute: typeof CompanyIdCompaniesEditIdImport
      parentRoute: typeof CompanyIdCompaniesRouteImport
    }
  }
}

// Create and export the route tree

interface CompanyIdCompaniesRouteRouteChildren {
  CompanyIdCompaniesCreateRoute: typeof CompanyIdCompaniesCreateRoute
  CompanyIdCompaniesListRoute: typeof CompanyIdCompaniesListRoute
  CompanyIdCompaniesEditIdRoute: typeof CompanyIdCompaniesEditIdRoute
}

const CompanyIdCompaniesRouteRouteChildren: CompanyIdCompaniesRouteRouteChildren =
  {
    CompanyIdCompaniesCreateRoute: CompanyIdCompaniesCreateRoute,
    CompanyIdCompaniesListRoute: CompanyIdCompaniesListRoute,
    CompanyIdCompaniesEditIdRoute: CompanyIdCompaniesEditIdRoute,
  }

const CompanyIdCompaniesRouteRouteWithChildren =
  CompanyIdCompaniesRouteRoute._addFileChildren(
    CompanyIdCompaniesRouteRouteChildren,
  )

interface CompanyIdRouteRouteChildren {
  CompanyIdCompaniesRouteRoute: typeof CompanyIdCompaniesRouteRouteWithChildren
  CompanyIdDashboardRoute: typeof CompanyIdDashboardRoute
}

const CompanyIdRouteRouteChildren: CompanyIdRouteRouteChildren = {
  CompanyIdCompaniesRouteRoute: CompanyIdCompaniesRouteRouteWithChildren,
  CompanyIdDashboardRoute: CompanyIdDashboardRoute,
}

const CompanyIdRouteRouteWithChildren = CompanyIdRouteRoute._addFileChildren(
  CompanyIdRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$companyId': typeof CompanyIdRouteRouteWithChildren
  '/$404': typeof R404Route
  '/first-company': typeof FirstCompanyRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/$companyId/companies': typeof CompanyIdCompaniesRouteRouteWithChildren
  '/$companyId/dashboard': typeof CompanyIdDashboardRoute
  '/$companyId/companies/create': typeof CompanyIdCompaniesCreateRoute
  '/$companyId/companies/list': typeof CompanyIdCompaniesListRoute
  '/$companyId/companies/edit/$id': typeof CompanyIdCompaniesEditIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$companyId': typeof CompanyIdRouteRouteWithChildren
  '/$404': typeof R404Route
  '/first-company': typeof FirstCompanyRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/$companyId/companies': typeof CompanyIdCompaniesRouteRouteWithChildren
  '/$companyId/dashboard': typeof CompanyIdDashboardRoute
  '/$companyId/companies/create': typeof CompanyIdCompaniesCreateRoute
  '/$companyId/companies/list': typeof CompanyIdCompaniesListRoute
  '/$companyId/companies/edit/$id': typeof CompanyIdCompaniesEditIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$companyId': typeof CompanyIdRouteRouteWithChildren
  '/$404': typeof R404Route
  '/first-company': typeof FirstCompanyRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/$companyId/companies': typeof CompanyIdCompaniesRouteRouteWithChildren
  '/$companyId/dashboard': typeof CompanyIdDashboardRoute
  '/$companyId/companies/create': typeof CompanyIdCompaniesCreateRoute
  '/$companyId/companies/list': typeof CompanyIdCompaniesListRoute
  '/$companyId/companies/edit/$id': typeof CompanyIdCompaniesEditIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$companyId'
    | '/$404'
    | '/first-company'
    | '/login'
    | '/register'
    | '/$companyId/companies'
    | '/$companyId/dashboard'
    | '/$companyId/companies/create'
    | '/$companyId/companies/list'
    | '/$companyId/companies/edit/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$companyId'
    | '/$404'
    | '/first-company'
    | '/login'
    | '/register'
    | '/$companyId/companies'
    | '/$companyId/dashboard'
    | '/$companyId/companies/create'
    | '/$companyId/companies/list'
    | '/$companyId/companies/edit/$id'
  id:
    | '__root__'
    | '/'
    | '/$companyId'
    | '/$404'
    | '/first-company'
    | '/login'
    | '/register'
    | '/$companyId/companies'
    | '/$companyId/dashboard'
    | '/$companyId/companies/create'
    | '/$companyId/companies/list'
    | '/$companyId/companies/edit/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CompanyIdRouteRoute: typeof CompanyIdRouteRouteWithChildren
  R404Route: typeof R404Route
  FirstCompanyRoute: typeof FirstCompanyRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CompanyIdRouteRoute: CompanyIdRouteRouteWithChildren,
  R404Route: R404Route,
  FirstCompanyRoute: FirstCompanyRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$companyId",
        "/$404",
        "/first-company",
        "/login",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$companyId": {
      "filePath": "$companyId/route.tsx",
      "children": [
        "/$companyId/companies",
        "/$companyId/dashboard"
      ]
    },
    "/$404": {
      "filePath": "$404.tsx"
    },
    "/first-company": {
      "filePath": "first-company.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/$companyId/companies": {
      "filePath": "$companyId/companies/route.tsx",
      "parent": "/$companyId",
      "children": [
        "/$companyId/companies/create",
        "/$companyId/companies/list",
        "/$companyId/companies/edit/$id"
      ]
    },
    "/$companyId/dashboard": {
      "filePath": "$companyId/dashboard.tsx",
      "parent": "/$companyId"
    },
    "/$companyId/companies/create": {
      "filePath": "$companyId/companies/create.tsx",
      "parent": "/$companyId/companies"
    },
    "/$companyId/companies/list": {
      "filePath": "$companyId/companies/list.tsx",
      "parent": "/$companyId/companies"
    },
    "/$companyId/companies/edit/$id": {
      "filePath": "$companyId/companies/edit/$id.tsx",
      "parent": "/$companyId/companies"
    }
  }
}
ROUTE_MANIFEST_END */
